const SI_SYMBOL = [
  "",
  "K",
  "M",
  "B",
  "T",
  "Qa",
  "Qi",
  "Sx",
  "Sp",
  "O",
  "N",
  "D",
  "UD",
  "UD",
  "DD",
  "TD",
  "QaD",
  "QiD",
  "SxD",
  "SpD",
  "OD",
  "ND",
  "V",
  "UV",
  "DV",
  "TV",
  "QaV",
  "QiV",
  "SxV",
  "SpV",
  "OV",
  "NV",
  "DT",
  "UDT",
  "DDT",
  "TDT",
  "QaDT",
  "QiDT",
  "SxDT",
  "SpDT",
  "ODT",
  "NDT",
  "DQa",
  "UDQa",
  "DDQa",
  "TDQa",
  "QaDQa",
  "QiDQa",
  "SxDQa",
  "SpDQa",
  "ODQa",
  "NDQa",
  "DQi",
  "UDQi",
  "DDQi",
  "TDQi",
  "QaDQi",
  "QiDQi",
  "SxDQi",
  "SpDQi",
  "ODQi",
  "NDQi",
  "DSx",
  "UDSx",
  "DDSx",
  "TDSx",
  "QaDSx",
  "QiDSx",
  "SxDSx",
  "SpDSx",
  "ODSx",
  "NDSx",
  "DSp",
  "UDSp",
  "DDSp",
  "TDSp",
  "QaDSp",
  "QiDSp",
  "SxDSp",
  "SpDSp",
  "ODSp",
  "NDSp",
  "DO",
  "UDO",
  "DDO",
  "TDO",
  "QaDO",
  "QiDO",
  "SxDO",
  "SpDO",
  "ODO",
  "NDO",
  "DN",
  "UDN",
  "DDN",
  "TDN",
  "QaDN",
  "QiDN",
  "SxDN",
  "SpDN",
  "ODN",
  "NDN",
  "C",
  "UC",
];
const searched = [];
const axios = require("axios");
const { jidDecode } = require("@adiwajshing/baileys");
module.exports = {
  searchFunc: function searchFunc(_n, _p) {
    for (const f of _n) {
      const func = _p.filter((filt) => filt == ("$" + f).slice(0, filt.length));

      if (func.length == 1) {
        searched.push(func[0]);
      } else if (func.length > 1) {
        searched.push(func.sort((a, b) => b.length - a.length)[0]);
      }
    }

    return searched;
  },
  getWaWebVer: function getWaWebVer() {
    let version;
    try {
      let { data } = axios.get(
        "https://web.whatsapp.com/check-update?version=1&platform=web"
      );
      version = [data.currentVersion.replace(/[.]/g, ", ")];
    } catch {
      version = [2, 2214, 12];
    }
    return version;
  },
  decodeJid: function decodeJid(jid) {
    if (!jid) return jid;
    if (/:\d+@/gi.test(jid)) {
      let decode = jidDecode(jid) || {};
      return (
        (decode.user && decode.server && decode.user + "@" + decode.server) ||
        jid
      );
    } else return jid;
  },
  runtime: function runtime(seconds) {
    seconds = Number(seconds);
    var d = Math.floor(seconds / (3600 * 24));
    var h = Math.floor((seconds % (3600 * 24)) / 3600);
    var m = Math.floor((seconds % 3600) / 60);
    var s = Math.floor(seconds % 60);
    var dDisplay = d > 0 ? d + (d == 1 ? "d, " : "d, ") : "0d, ";
    var hDisplay = h > 0 ? h + (h == 1 ? "h, " : "h, ") : "0h, ";
    var mDisplay =
      m > 0 ? m + (m == 1 ? "m, " : "m, ") : "0m, ";
    var sDisplay = s > 0 ? s + (s == 1 ? "s" : "s") : "0s";
    return dDisplay + hDisplay + mDisplay + sDisplay;
  },
  sender: function sender(d) {
    return d.msg.key.fromMe
      ? d.client.user.id
      : d.msg.participant
      ? d.msg.participant
      : d.msg.key.participant
      ? d.msg.key.participant
      : d.msg.key.remoteJid;
  },
  array_move: function array_move(arr, old_index, new_index) {
    if (new_index >= arr.length) {
      var k = new_index - arr.length + 1;
      while (k--) {
        arr.push(undefined);
      }
    }
    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
    return arr;
  },
  escapeRegex: function escapeRegex(string) {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
  },
  check: function check(n, theFuncs) {
    return [n].some((v) => theFuncs.indexOf(v) >= 0);
  },
  fileNameFromUrl: function fileNameFromUrl(url) {
    var matches = url.match(/\/([^\/?#]+)[^\/]*$/);
    if(!matches) {
      return undefined;
    } else {
      if (matches.length > 1) {
        return matches[1];
      }
      return null;
    }
  },
  isUrl: function isUrl(i) {
    var pattern = new RegExp(
        "^(https?:\\/\\/)?" +
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" +
        "((\\d{1,3}\\.){3}\\d{1,3}))|" +
        "localhost" +
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" +
        "(\\?[;&a-z\\d%_.~+=-]*)?" +
          "(\\#[-a-z\\d_]*)?$",
        "i"
      );

    return pattern.test(i)
  },
  checkConnect: function checkConnect(con, self, callback) {
    var test = setInterval(function() {
      if(self.connect) {
        con = self.connect;
        clearInterval(test);
        callback(con);
      }
    }, 1000);
  },
  checkQR: function checkQR(con, self, callback) {
    if(!self.connect) {
      var checkQr = setInterval(function() {
        if(self.qr) {
          con = self.qr;
          clearInterval(checkQr);
          callback(con);
        }
      }, 1000);
    }
  },
  execInterpreterIfAnDollarInArray: async function execInterpreterIfAnDollarInArray(arr, db) {
    for (var i = 0; i < arr.length; i++) {
      if(arr[i].includes("$")) {
          arr[i] = await require("../interpreter")(
              arr[i],
              "",
              "",
              "",
              "",
              db,
              "",
              true
            );
      }
    }

    return arr
  },
  bytesToSize: function bytesToSize(bytes) {
     var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
     if (bytes == 0) return '0';
     var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
     return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
  },

  numberSeparator: function numberSeparator(i) {

    var number = (i);

    return Intl.NumberFormat().format(number);

  },
  abbreviate(number) {
    var decimal = 1;
    const tier = Math.floor(Math.log10(Math.abs(number || 1)) / 3);
    if (tier === 0) return number;
    const suffix = SI_SYMBOL[tier];
    const scale = Math.pow(10, tier * 3);
    const scaled = number / scale;
    return scaled.toFixed(decimal) + suffix;
  }
};
